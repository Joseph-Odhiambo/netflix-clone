{"version":3,"sources":["axios.js","Row.js","requests.js","Banner.js","Navbar.js","App.js","serviceWorker.js","index.js"],"names":["instace","axios","create","baseURL","Row","title","fetchUrl","isLargeRow","useState","movies","setMovies","trailerUrl","setTrailerUrl","useEffect","a","get","request","data","results","fetchData","className","map","movie","key","id","onClick","movieTrailer","original_name","name","then","url","urlParams","URLSearchParams","URL","search","console","log","catch","error","handleclick","src","poster_path","backdrop_path","alt","videoId","opts","height","width","playerVars","autoplay","API_KEY","requests","fetchTrending","fetchNetflixOriginals","topRated","nowPlaying","getUpcoming","fetchActionMovies","fetchComedyMovies","fetchHorrorMovies","fetchRomanceMovies","fetchDocumentariesMovies","Banner","str","n","Math","floor","random","length","fetchBanner","style","backgroundSize","backgroundImage","backgroundPosition","overview","substr","Navbar","show","handleShow","window","addEventListener","scrollY","removeEventListener","App","Boolean","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","message"],"mappings":"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","file":"static/js/main.13196ce1.chunk.js","sourcesContent":["import axios from 'axios';\n\nconst instace = axios.create(\n    {\n        baseURL: \"https://api.themoviedb.org/3\",\n    }\n)\n\nexport default instace;","import React, { useState, useEffect } from \"react\";\nimport axios from \"./axios\"; \nimport \"./Row.css\";\nimport YouTube from \"react-youtube\";\nimport movieTrailer from \"movie-trailer\";\nconst image_url = \"https://image.tmdb.org/t/p/original\";\n\nfunction Row({ title, fetchUrl, isLargeRow }) {\n  const [movies, setMovies] = useState([]);\n  const [trailerUrl, setTrailerUrl] = useState(\"\");\n\n  // code that runs based on a specific condition\n  useEffect(() => {\n    async function fetchData() {\n      const request = await axios.get(fetchUrl);\n      setMovies(request.data.results);\n      return request;\n    }\n    fetchData();\n  }, [fetchUrl]);\n  const opts = {\n    height: '390',\n    width: '100%',\n    playerVars: {\n      // https://developers.google.com/youtube/player_parameters\n      autoplay: 1,\n    },\n  };\n\n  // click event\n  const handleclick = (movie) => {\n    // console.log(movie?.title || movie?.original_name || movie?.name);\n    if (trailerUrl) {\n      setTrailerUrl('');\n    } \n    else {\n      movieTrailer(movie?.title || movie?.original_name || movie?.name)\n        .then((url) => {\n          const urlParams = new URLSearchParams(new URL(url).search);\n          setTrailerUrl(urlParams.get(\"v\"));\n          console.log(trailerUrl);\n        })\n        .catch((error) => console.log(error));\n    }\n  };\n   \n\n  return (\n    <div className=\"row\">\n      <h2>{title}</h2>\n      <div className=\"row_posters\">\n        {movies.map((movie) => (\n          <img\n            key={movie.id} // instant responce\n            onClick={() => handleclick(movie)}\n            className={`row_poster ${isLargeRow && \"largePoster\"}`}\n            src={`${image_url}${\n              isLargeRow ? movie.poster_path : movie.backdrop_path\n            }`}\n            alt={movie.name}\n          />\n        ))}\n      </div>\n      {trailerUrl && <YouTube videoId={trailerUrl} opts={opts} />}\n    </div>\n  );\n}\n\nexport default Row;\n","const API_KEY = \"3398b411aabf78b7d423c667c60ee23f\";\n\nconst requests = {\n    fetchTrending : `/trending/all/week?api_key=${API_KEY}&language=en-US`,\n    fetchNetflixOriginals: `/discover/tv?api_key=${API_KEY}&with_networks=213`,\n    topRated: `/movie/top_rated?api_key=${API_KEY}&language=en-US`,\n    nowPlaying: `/movie/now_playing?api_key=${API_KEY}&language=en-US`,\n    getUpcoming: `/movie/upcoming?api_key=${API_KEY}&language=en-US`,\n    fetchActionMovies: `/discover/movie?api_key=${API_KEY}&with_genres=28&language=en-US`,\n    fetchComedyMovies: `/discover/movie?api_key=${API_KEY}&with_genres=35&language=en-US`,\n    fetchHorrorMovies: `/discover/movie?api_key=${API_KEY}&with_genres=27&language=en-US`,\n    fetchRomanceMovies: `/discover/movie?api_key=${API_KEY}&with_genres=10749&language=en-US`,\n    fetchDocumentariesMovies: `/discover/movie?api_key=${API_KEY}&with_genres=99&language=en-US`,\n}\n\nexport default requests;","import React, { useState, useEffect } from \"react\";\nimport axios from \"./axios\";\nimport requests from \"./requests\";\nimport \"./Banner.css\";\n\nfunction Banner() {\n  const [movie, setMovies] = useState([]);\n\n  useEffect(() => {\n    async function fetchBanner() {\n      const request = await axios.get(requests.fetchNetflixOriginals);\n      setMovies(\n        request.data.results[\n          Math.floor(Math.random() * request.data.results.length - 1) //random movie from the request\n        ]\n      );\n      return request;\n    }\n    fetchBanner();\n  }, []); // [] makes the rewuest runs once when the banner loads\n  console.log(movie);\n\n  function truncate(str, n){\n      return str?.length > n ? str.substr(0, n-1) + \"...\": str;\n  } // function to trancate a string \n\n  return (\n    <header\n      className=\"banner\"\n      style={{\n        backgroundSize: \"cover\",\n        backgroundImage: `url(\"https://image.tmdb.org/t/p/original/${movie?.backdrop_path}\")`,\n        backgroundPosition: \"center center\",\n      }}\n    >\n      <div className=\"banner__content\">\n        {/* title */}\n        <h1 className=\"banner_title\">\n          {\" \"}\n          {movie?.title || movie?.original_name || movie?.name}\n        </h1>\n        {/* description */}\n\n        <h2 className=\"banner__description\">{truncate(movie?.overview, 160)}</h2>\n\n        {/* div with 2 buttons play and more info */}\n        <div className=\"banner__buttons\">\n          <button className=\"banner__button\">Play</button>\n          <button className=\"banner__button_list\">My List</button>\n        </div>\n      </div>\n      <div className=\"banner__fade\"/>\n    </header>\n  );\n}\n\nexport default Banner;\n","import React, {useEffect, useState} from \"react\";\nimport \"./Navbar.css\"\n\nfunction Navbar() {\n    const [show, handleShow] = useState(false);\n    useEffect(() => {\n\n        window.addEventListener(\"scroll\", () =>{\n            if (window.scrollY > 100 ){\n                handleShow(true);\n            }else handleShow(false);\n        });\n        return () => {\n            window.removeEventListener(\"scroll\");\n        }\n    }, []);\n  return (\n    <div className={`nav ${show && \"nav_black\"}`}>\n      <img\n        className=\"nav_logo\"\n        src=\"https://image.tmdb.org/t/p/original/wwemzKWzjKYJFfCeiB57q3r4Bcm.svg\"\n        alt=\"Netflix Logo\"\n      />\n\n      <img\n        className=\"nav_user\"\n        src=\"https://ih0.redbubble.net/image.618427277.3222/flat,1000x1000,075,f.u2.jpg\"\n        alt=\"user\"\n      />\n    </div>\n  );\n}\n\nexport default Navbar;\n","import React from \"react\";\nimport Row from \"../src/Row\";\nimport \"./App.css\";\nimport requests from \"./requests\";\nimport Banner from \"./Banner\";\nimport Navbar from \"./Navbar\";\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      {/* navbar */}\n      <Navbar />\n      {/* banner component */}\n      <Banner />\n\n      {/* row components */}\n      <Row\n        title=\"Netflix Original\"\n        fetchUrl={requests.fetchNetflixOriginals}\n        isLargeRow // prop for styling individual row\n      />\n      <Row title=\"Trending Now \" fetchUrl={requests.fetchTrending} />\n      <Row title=\"Now Playing\" fetchUrl={requests.nowPlaying} />\n      <Row title=\"Upcoming\" fetchUrl={requests.getUpcoming} />\n      <Row title=\"Action\" fetchUrl={requests.fetchActionMovies} />\n      <Row title=\"Comedy\" fetchUrl={requests.fetchComedyMovies} />\n      <Row title=\"Horror \" fetchUrl={requests.fetchHorrorMovies} />\n      <Row title=\"Romance\" fetchUrl={requests.fetchRomanceMovies} />\n      <Row title=\"Documentaries\" fetchUrl={requests.fetchDocumentariesMovies} />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}